const constants=SFU.constants,sfu=SFU;let bitrateTestState;const BITRATE_TEST="bitrateTest",TEST_DURATION=3e4,defaultConfig={room:{url:"ws://localhost:8080",name:"ROOM1",pin:"1234",nickName:"User1",failedProbesThreshold:5,pingInterval:5e3}},CurrentState=function(t){let e={prefix:t,pc:null,session:null,room:null,bitrateController:null,set:function(t,n,o){e.pc=t,e.session=n,e.room=o},clear:function(){e.room=null,e.session=null,e.pc=null,e.bitrateController=null},durationId:function(){return e.prefix+"Duration"},buttonId:function(){return e.prefix+"Btn"},statusId:function(){return e.prefix+"Status"},errInfoId:function(){return e.prefix+"ErrorInfo"},currentStateId:function(){return e.prefix+"CurrentState"},getBitrateController:function(){return e.bitrateController},setBitrateController:function(t){e.bitrateController=t},isConnected:function(){return e.session&&e.session.state()===constants.SFU_STATE.CONNECTED}};return e},init=function(){bitrateTestState=CurrentState(BITRATE_TEST),$("#"+bitrateTestState.buttonId()).prop("disabled",!0),$("#url").prop("disabled",!0),onDisconnected(bitrateTestState),$("#url").val(setURL()),$("#"+bitrateTestState.durationId()).val(3e4)},connect=async function(t){const e=new RTCPeerConnection,n=getRoomConfig(defaultConfig);n.url=$("#url").val(),n.roomName="ROOM1-"+createUUID(4),n.nickname="User1"+createUUID(4),setStatus(t.statusId()," "),setStatus(t.errInfoId()," "),$("#"+t.currentStateId()).val("");try{const o=await sfu.createRoom(n);o.on(constants.SFU_EVENT.DISCONNECTED,(function(){onStopClick(t),onDisconnected(t),setStatus(t.statusId(),"DISCONNECTED","green")})).on(constants.SFU_EVENT.FAILED,(function(e){onStopClick(t),onDisconnected(t),setStatus(t.statusId(),"FAILED","red"),e.status&&e.statusText?setStatus(t.errInfoId(),e.status+" "+e.statusText,"red"):e.type&&e.info&&setStatus(t.errInfoId(),e.type+": "+e.info,"red")})),onConnected(t,e,o),setStatus(t.statusId(),"ESTABLISHED","green")}catch(e){onDisconnected(t),setStatus(t.statusId(),"FAILED","red"),setStatus(t.errInfoId(),e,"red")}},onConnected=function(t,e,n){t.set(e,n,n.room()),$("#"+t.buttonId()).text("Stop").off("click").click((function(){onStopClick(t)})).prop("disabled",!1),$("#url").prop("disabled",!0),$("#"+bitrateTestState.durationId()).prop("disabled",!0),t.room.on(constants.SFU_ROOM_EVENT.FAILED,(function(e){setStatus(t.errInfoId(),e,"red"),onStopClick(t)})).on(constants.SFU_ROOM_EVENT.OPERATION_FAILED,(function(e){onOperationFailed(t,e)})).on(constants.SFU_ROOM_EVENT.ENDED,(function(){setStatus(t.errInfoId(),"Room "+t.room.name()+" has ended","red"),onStopClick(t)})).on(constants.SFU_ROOM_EVENT.DROPPED,(function(){setStatus(t.errInfoId(),"Dropped from the room "+t.room.name()+" due to network issues","red"),onStopClick(t)})),startBitrateTest(t)},onDisconnected=function(t){t.clear(),$("#"+t.buttonId()).text("Start").off("click").click((function(){onStartClick(t)})).prop("disabled",!1),$("#url").prop("disabled",!1),$("#"+bitrateTestState.durationId()).prop("disabled",!1)},onStartClick=function(t){validateForm("connectionForm",t.errInfoId())&&($("#"+t.buttonId()).prop("disabled",!0),connect(t))},startBitrateTest=async function(t){if(t.room){await t.room.join(t.pc,null,{});const e=$("#"+t.currentStateId());e.attr("style","display:inline-block;margin-left: 10px");try{const n=t.room.getBitrateTest();t.setBitrateController(n),n.setListener({onStatusUpdate(t){e.text("Current bitrate: "+t+" kbps")}}),n.test($("#"+bitrateTestState.durationId()).val()).then((n=>{e.text("Test is finished, last measured bitrate: "+n+" kbps"),t.setBitrateController(null),onStopClick(t)}))}catch(e){e.type===constants.SFU_ROOM_EVENT.OPERATION_FAILED?onOperationFailed(t,e):(console.error("Failed to start bitrate test: "+e),setStatus(t.errInfoId(),e.name,"red"),onStopClick(t))}}},stopBitrateTest=function(t){const e=t.getBitrateController();e&&e.stop()},onOperationFailed=function(t,e){e.operation&&e.error?setStatus(t.errInfoId(),e.operation+" failed: "+e.error,"red"):setStatus(t.errInfoId(),e,"red"),onStopClick(t)},onStopClick=async function(t){t.isConnected()&&(stopBitrateTest(t),await t.session.disconnect(),onDisconnected(t))},setStatus=function(t,e,n){const o=document.getElementById(t);n&&(o.style.color=n),o.innerText=e},validateForm=function(t,e){let n=!0;return $("#"+t+" :text").each((function(){$(this).val()?($(this).closest(".input-group").removeClass("has-error"),setStatus(e,"")):($(this).closest(".input-group").addClass("has-error"),n=!1,setStatus(e,"Fields cannot be empty","red"))})),n};